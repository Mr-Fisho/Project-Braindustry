buildscript {
    ext {
        kotlinVersion="1.5.21"

        arcHash = 'v135'
        mindustryVersion = 'v135'
        //advanced content info
        aciVersion = 'ddba381caf1'
        //gas
        gassesVersion = 'v1.6'/*
        String modCoreVersionDemo = null;
        try {
            modCoreVersionDemo = new String(new java.net.URL("https://raw.githubusercontent.com/Zelaux/ZelauxModCore/master/versions/" + mindustryVersion + ".txt").openStream().readAllBytes());
        } catch (IOException exception) {
            throw new RuntimeException(exception);
        }
        println "core: "+modCoreVersionDemo
        modCoreVersion = modCoreVersionDemo*/
        modCoreVersion = "8dbf4593d2e"
    }
    repositories {
        mavenLocal()
        mavenCentral()
//        google()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
//        classpath "com.github.Anuken:packr:-SNAPSHOT"
//        classpath "com.github.Anuken.Arc:packer:$mindustryVersion"
        classpath "com.github.Anuken.Arc:arc-core:$arcHash"
        classpath "com.github.Anuken.Mindustry:core:$mindustryVersion"
        classpath "com.github.Anuken.Mindustry:tools:$mindustryVersion"
        classpath "com.github.Anuken.Arc:packer:$arcHash"
        classpath "com.github.Zelaux:AdvancedContentInfo:$aciVersion"
        classpath 'commons-io:commons-io:2.5'
        classpath "com.github.Zelaux.ZelauxModCore:annotations:$modCoreVersion"
//        classpath "com.github.Zelaux.GasLibrary:core:$gassesVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}
plugins {
    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
    id "org.jetbrains.kotlin.kapt" version "$kotlinVersion"
    id 'groovy'
}
ext {
    //the build number that this mod is made for
    //version of SDK you will be using
    sdkVersion = '30'
    sdkRoot = System.getenv("ANDROID_HOME")

    doExec = { cmd ->
        def proc = cmd.execute(null, new File("$buildDir/libs"))
        proc.waitForProcessOutput(System.out, System.err)
    }
}

version '1.0'
allprojects {
    apply plugin: "kotlin"
    apply plugin: 'groovy'

//    version = 'release'
    group = 'com.github.Zelaux'
    ext {
        arcModule = { String name ->
            //skip to last submodule
            if (name.contains(':')) name = name.split(':').last()
            return "com.github.Anuken.Arc:$name:$arcHash"
        }
    }
    apply plugin: 'maven-publish'

    repositories {
        mavenLocal()
        google()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url 'https://jitpack.io' }
    }

    compileKotlin{
        sourceCompatibility = JavaVersion.VERSION_16
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    tasks.withType(JavaCompile) {
        targetCompatibility = 8
        sourceCompatibility = JavaVersion.VERSION_16
        options.encoding = "UTF-8"
        options.compilerArgs += ["-Xlint:deprecation"]

        options.forkOptions.jvmArgs.addAll([
                '--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED'
        ])
    }
}

dependencies {
    implementation  "com.github.Zelaux.ZelauxModCore:core:$modCoreVersion"
    implementation "com.github.Zelaux:AdvancedContentInfo:$aciVersion"
}
configure(project(":annotations")) {
    tasks.withType(JavaCompile) {
        targetCompatibility = 8
        sourceCompatibility = 8
        options.fork = true
    }
}

//compile with java 8 compatibility for everything except the annotation project
configure(subprojects - project(":annotations")) {
    tasks.withType(JavaCompile) {
        options.compilerArgs.addAll(['--release', '8'])
    }

    tasks.withType(Javadoc) {
        options {
            addStringOption('Xdoclint:none', '-quiet')
            addStringOption('-release', '16')
        }
    }
}

project(":core") {
    apply plugin: "java-library"
    apply plugin: "kotlin"
    apply plugin: "kotlin-kapt"

    kapt {
        javacOptions {
            option("-source", "16")
            option("-target", "1.8")
        }
    }

    compileJava.options.fork = true

    task preGen {
        outputs.upToDateWhen { false }
//        generateLocales()
//        writeVersion()

//        dependsOn(project("annotations").tasks.getByName("writeProcessors"))
//        writePlugins()
    }
    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task assetsJar(type: Jar, dependsOn: ":tools:pack") {
        archiveClassifier = 'assets'
        from files("assets") {
            exclude "config", "cache", "music", "sounds"
        }
    }
    artifacts {
        archives sourcesJar
        archives assetsJar
    }
    dependencies {
        compileJava.dependsOn(preGen)

        implementation  "com.github.Zelaux.ZelauxModCore:core:$modCoreVersion"
        implementation  "com.github.Zelaux.ZelauxModCore:graphics:$modCoreVersion"
        implementation "com.github.Zelaux:AdvancedContentInfo:$aciVersion"

        compileOnly "org.lz4:lz4-java:1.7.1"
        compileOnly arcModule("arc-core")
        compileOnly arcModule("extensions:flabel")
        compileOnly arcModule("extensions:freetype")
        compileOnly arcModule("extensions:g3d")
        compileOnly arcModule("extensions:fx")
        compileOnly arcModule("extensions:arcnet")
//        compileOnly "com.github.Anuken.Mindustry:entities:$mindustryVersion"
        compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
//        compileOnly "com.github.Anuken.Mindustry:tools:$mindustryVersion"
//        implementation "com.github.Zelaux:AdvancedContentInfo:$aciVersion"
        compileOnly "com.github.Zelaux.GasLibrary:core:$gassesVersion"


        annotationProcessor 'com.github.Anuken:jabel:34e4c172e65b3928cd9eabe1993654ea79c409cd'

        compileOnly "com.github.Zelaux.ZelauxModCore:annotations:$modCoreVersion"
        compileOnly project(":annotations")
        kapt project(":annotations")
//        annotationProcessor 'com.github.Anuken:jabel:34e4c172e65b3928cd9eabe1993654ea79c409cd'

    }

    afterEvaluate {
        task mergedJavadoc(type: Javadoc) {
            if (true) return null;
            def blacklist = [project(":annotations")]
            if (findProject(":android") != null) {
                blacklist += project(":android")
            }

            source rootProject.subprojects.collect { project ->
                if (!blacklist.contains(project) && project.hasProperty("sourceSets")) {
                    return project.sourceSets.main.allJava
                }
            }

            classpath = files(rootProject.subprojects.collect { project ->
                if (!blacklist.contains(project) && project.hasProperty("sourceSets")) {
                    return project.sourceSets.main.compileClasspath
                }
            })
            destinationDir = new File(buildDir, 'javadoc')
        }
    }
    jar {
        exclude("braindustry/entities/comp/**")
        exclude("braindustry/entities/compByAnuke/**")
    }
}
project(":tools") {
    apply plugin: "java"
    dependencies {
        implementation fileTree(dir: 'libs', include: ['*.jar'])
        implementation 'commons-io:commons-io:2.5'

        implementation project(":core")

        implementation 'com.github.javaparser:javaparser-symbol-solver-core:3.22.1'
        implementation "com.github.Anuken.Mindustry:core:$mindustryVersion"
        implementation "com.github.Anuken.Mindustry:tools:$mindustryVersion"
        implementation "com.github.Zelaux:AdvancedContentInfo:$aciVersion"
        implementation "com.github.Zelaux.GasLibrary:core:$gassesVersion"

        implementation "com.github.Zelaux.ZelauxModCore:core:$modCoreVersion"
        implementation "com.github.Zelaux.ZelauxModCore:tools:$modCoreVersion"

        implementation arcModule("natives:natives-desktop")
        implementation arcModule("natives:natives-freetype-desktop")
        implementation arcModule("backends:backend-headless")

//        implementation "com.github.Anuken.Arc:packer:$packerHash"
    }
}
project(":annotations") {
    apply plugin: "java-library"
    dependencies {
        implementation 'com.squareup:javapoet:1.12.1'
        implementation arcModule('arc-core')
        implementation "com.github.Anuken.Mindustry:core:$mindustryVersion"
        implementation "com.github.Anuken.Mindustry:tools:$mindustryVersion"


        implementation "com.github.Zelaux.ZelauxModCore:core:$modCoreVersion"
        implementation "com.github.Zelaux.ZelauxModCore:tools:$modCoreVersion"
        implementation "com.github.Zelaux.ZelauxModCore:annotations:$modCoreVersion"
    }
}
configure([":core", ":tools"].collect { project(it) }) {
    java {
        withJavadocJar()
        withSourcesJar()
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
            }
        }
    }
}
task jarAndroid {
    dependsOn "jar"

    doLast {
        //collect dependencies needed for desugaring
        def files = (
                project(":core").configurations.compileClasspath.asList() +
                        project(":core").configurations.runtimeClasspath.asList() +
                        configurations.runtimeClasspath.asList() +
                        [new File("$sdkRoot/platforms/android-$sdkVersion/android.jar")]
        )
        def dependencies = files.collect { "--classpath $it.path" }.join(" ")

        //dex and desugar files - this requires d8 in your PATH
        doExec("d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar")
    }
}
jar {
    dependsOn "core:jar"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = "${project.archivesBaseName}Desktop.jar"
    from {
//        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        project(":core").fileTree("build/libs/core.jar").collect { it.isDirectory() ? it : zipTree(it) }
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
//        project(":core").fileTree("build/libs/core.jar").collect { it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir) {
        include "mod.hjson"
        include "mod.json"
        include "icon.png"
    }

    from("core/assets/") {
        include "**"
    }
}
task deploy(type: Jar) {
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${project.archivesBaseName}.jar"

    from { [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

    doLast {
        delete { delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar" }
        delete { delete "$buildDir/libs/${project.archivesBaseName}Android.jar" }
    }
}
task mjar() {
    dependsOn "jar"
    doFirst {
    }
    ext{
        move={String intoPath ->
            delete {
                delete "${intoPath}/${project.archivesBaseName}Desktop.jar"
            }
            copy {
                from "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
                into intoPath
            }
            println "moved to "+intoPath
        }
    }
    doLast {
     def   modsDirectories = ["classic"];
        def file = new File(rootDir, "modsDirectoies.txt");
        if (file.exists()) {
            BufferedReader reader = new BufferedReader(new FileReader(file));
            reader.lines().forEach(line -> modsDirectories.add(line))
        }
        for (String directory:modsDirectories){
            if (directory.equals("classic")){
                directory="${arc.util.OS.getAppDataDirectoryString("Mindustry")}/mods/";
            }
            move(directory);
        }
        def time = LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss"));
        System.out.println("\tlast build time: ${time}")
    }
}
